/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UI.java
 *
 * Created on 16 Nov, 2010, 5:06:20 PM
 */

package parser;

import edu.stanford.nlp.ling.TaggedWord;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author hp
 */
public class UI extends javax.swing.JFrame {

    EarleyParser ep = new EarleyParser(this);
    Tagger t = new Tagger();
    List <String> ParseTrees;
    Boolean parsingStarted = false;
    List <TaggedWord> Sentence;
    Thread parseThread = null;
    /** Creates new form UI */
    public UI() {
        initComponents();
        Output.setEditable(false);

        /*
         * Set Initial Label Positions
         */
        jLabel2.setBounds((int) (((Output.getAlignmentX() + Output.size().getWidth()) / 2) - jLabel2.getBounds().width / 2), jLabel2.getBounds().y, jLabel2.getBounds().width, jLabel2.getBounds().height);
        jLabel1.setBounds((int) (((Input.getAlignmentX() + Input.size().getWidth()) / 2) - jLabel1.getBounds().width / 2), jLabel1.getBounds().y, jLabel1.getBounds().width, jLabel1.getBounds().height);

        ep.loadGrammar("src/Grammar/grammar.txt");      //Load grammar
        
        //t.setFile("C:/Users/hp/Desktop/Pulkit Ne marwaaya/test.txt");

        //List <TaggedWord> Sentence = t.GetNextTagged();

        /*ParseTrees = ep.parse(Sentence);
        for (int i = 0; i < ParseTrees.size(); ++i) {
            Output.append(ParseTrees.get(i));
            Output.append("\n");
        }*/

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Input = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Output = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        ParseButton = new javax.swing.JButton();
        LoadFileButton = new javax.swing.JButton();
        GrammarLoadButton = new javax.swing.JButton();
        ParseProgress = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jSplitPane1.setLeftComponent(jScrollPane2);

        jTextField1.setText("jTextField1");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jSplitPane1.setRightComponent(jTextField1);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jSplitPane1.setRightComponent(jScrollPane3);

        Input.setColumns(20);
        Input.setRows(5);
        jScrollPane1.setViewportView(Input);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setLabelFor(Input);
        jLabel1.setText("Input");
        jLabel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel1MouseDragged(evt);
            }
        });
        jLabel1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jLabel1AncestorResized(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(278, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(235, 235, 235))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        Output.setColumns(20);
        Output.setRows(5);
        jScrollPane4.setViewportView(Output);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setLabelFor(Output);
        jLabel2.setText("Parsed Outupt");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel2MouseDragged(evt);
            }
        });
        jLabel2.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jLabel2AncestorResized(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(222, 222, 222)
                .addComponent(jLabel2)
                .addContainerGap(239, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        ParseButton.setText("Parse");
        ParseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParseButtonActionPerformed(evt);
            }
        });

        LoadFileButton.setText("Load File");
        LoadFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadFileButtonActionPerformed(evt);
            }
        });

        GrammarLoadButton.setText("Load Grammar File");
        GrammarLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GrammarLoadButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Open file");
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Exit");
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Parse");

        jMenuItem3.setText("Parse");
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(ParseButton)
                            .addGap(18, 18, 18)
                            .addComponent(LoadFileButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(GrammarLoadButton)
                            .addContainerGap(225, Short.MAX_VALUE)))
                    .addComponent(ParseProgress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ParseButton)
                    .addComponent(LoadFileButton)
                    .addComponent(GrammarLoadButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                .addGap(22, 22, 22)
                .addComponent(ParseProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void ParseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParseButtonActionPerformed
        //File input = loadInputIntoFile();
        if (parseThread == null) {
            if (!parsingStarted) {
                t.setFile(loadInputIntoFile());
                Sentence = t.GetNextTagged();
                parsingStarted = true;
            }
            ep.setSentence(Sentence);
            System.out.println("starting parsing.");
            parseThread = new Thread(ep);
            parseThread.start();
            System.out.println("parsing started.");
            //ParseTrees = ep.parse(Sentence);
            
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_ParseButtonActionPerformed

    private void LoadFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFileButtonActionPerformed
        JFileChooser _fileChooser = new JFileChooser();
        int retval = _fileChooser.showOpenDialog(this);

        /*
        * extensions of files user is allowed to choose
        */
        final String[] okFileExtensions = new String[] {"txt"};
        File file;

        if (retval == JFileChooser.APPROVE_OPTION) {
            file = _fileChooser.getSelectedFile();
            Boolean flag = false;
            for (String extension : okFileExtensions) {
                if (file.getName().toLowerCase().endsWith(extension)) {
                    flag = true;
                }
            }
            if (!flag) {
                JOptionPane.showMessageDialog(this, "Please choose a txt file only.","Error",JOptionPane.ERROR_MESSAGE);
                return;
            }
            Input.setText("");
            loadFileIntoInputBox(file);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_LoadFileButtonActionPerformed

    private void GrammarLoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GrammarLoadButtonActionPerformed
        JFileChooser _fileChooser = new JFileChooser();
        int retval = _fileChooser.showOpenDialog(this);

        /*
        * extensions of files user is allowed to choose
        */
        final String[] okFileExtensions = new String[] {"txt"};
        File file;

        if (retval == JFileChooser.APPROVE_OPTION) {
            file = _fileChooser.getSelectedFile();
            Boolean flag = false;
            for (String extension : okFileExtensions) {
                if (file.getName().toLowerCase().endsWith(extension)) {
                    flag = true;
                }
            }
            if (!flag) {
                JOptionPane.showMessageDialog(this, "Please choose a txt file only.","Error",JOptionPane.ERROR_MESSAGE);
                return;
            }
            //Input.setText("");
            //loadFileIntoInputBox(file);
            System.out.println(file.getAbsolutePath());
            if (!ep.loadGrammar(file.getAbsolutePath())) {
                JOptionPane.showMessageDialog(this, "Unable to load Grammar.","Error",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_GrammarLoadButtonActionPerformed

    private void jLabel2AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jLabel2AncestorResized
        //System.out.println("Ancestor Resized");
        jLabel2.setBounds((int) (((Output.getAlignmentX() + Output.size().getWidth()) / 2) - jLabel2.getBounds().width / 2), jLabel2.getBounds().y, jLabel2.getBounds().width, jLabel2.getBounds().height);
        jLabel1.setBounds((int) (((Input.getAlignmentX() + Input.size().getWidth()) / 2) - jLabel1.getBounds().width / 2), jLabel1.getBounds().y, jLabel1.getBounds().width, jLabel1.getBounds().height);

        //jLabel2.setV( (float) (((Output.getAlignmentX() + Output.size().getWidth()) / 2) - jLabel2.size().getWidth() / 2));

        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel2AncestorResized

    private void jLabel1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jLabel1AncestorResized
        jLabel2.setBounds((int) (((Output.getAlignmentX() + Output.size().getWidth()) / 2) - jLabel2.getBounds().width / 2), jLabel2.getBounds().y, jLabel2.getBounds().width, jLabel2.getBounds().height);
        jLabel1.setBounds((int) (((Input.getAlignmentX() + Input.size().getWidth()) / 2) - jLabel1.getBounds().width / 2), jLabel1.getBounds().y, jLabel1.getBounds().width, jLabel1.getBounds().height);
    }//GEN-LAST:event_jLabel1AncestorResized

    private void jLabel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseDragged
        jLabel2.setBounds((int) (((Output.getAlignmentX() + Output.size().getWidth()) / 2) - jLabel2.getBounds().width / 2), jLabel2.getBounds().y, jLabel2.getBounds().width, jLabel2.getBounds().height);
        jLabel1.setBounds((int) (((Input.getAlignmentX() + Input.size().getWidth()) / 2) - jLabel1.getBounds().width / 2), jLabel1.getBounds().y, jLabel1.getBounds().width, jLabel1.getBounds().height);
    }//GEN-LAST:event_jLabel2MouseDragged

    private void jLabel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseDragged
        jLabel2.setBounds((int) (((Output.getAlignmentX() + Output.size().getWidth()) / 2) - jLabel2.getBounds().width / 2), jLabel2.getBounds().y, jLabel2.getBounds().width, jLabel2.getBounds().height);
        jLabel1.setBounds((int) (((Input.getAlignmentX() + Input.size().getWidth()) / 2) - jLabel1.getBounds().width / 2), jLabel1.getBounds().y, jLabel1.getBounds().width, jLabel1.getBounds().height);
    }//GEN-LAST:event_jLabel1MouseDragged

    private void loadFileIntoInputBox(File file)
    {
        try
        {
            // Open the file that is the first
            // command line parameter
            FileInputStream fstream = new
                    FileInputStream(file);

            // Convert our input stream to a
            // DataInputStream
            DataInputStream in =
                    new DataInputStream(fstream);

            // Continue to read lines while
            // there are still some left to read
            while (in.available() !=0)
            {
                String line = in.readLine();
                Input.append(line);
                //System.out.print(lhs + " -> ");
                //for (int i = 0; i < rhs.length; ++i) {
                //    System.out.print(rhs[i] + " ");
                //}
                //System.out.println();
                // Print file line to screen
                //System.out.println (in.readLine());
            }

            in.close();
        }
        catch (Exception e)
        {
            System.err.println("File input error");
        }
    }

    private String loadInputIntoFile()
    {
        String tempdir = System.getProperty("user.dir");
        String tempFilename = "input.txt";

        System.out.println(tempdir);
        boolean mkdir = (new File(tempdir)).mkdir();
        System.out.println(mkdir);
        File file = new File(tempdir + File.separator + tempFilename);

        try {
            FileOutputStream fos = new FileOutputStream(tempFilename);
            try {
                fos.write(Input.getText().getBytes());
            } catch (IOException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
            return (tempdir + File.separator + tempFilename);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    /**
    * @param args the command line arguments
    */
    public static void display() {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    public void updateStats(int progress)
    {
        ParseProgress.setValue(progress);
        if (ep.halt == true) {
            ParseTrees = ep.parseTrees;
            parseThread = null;
            Output.setText("");
            for (int i = 0; i < ParseTrees.size(); ++i) {
                Output.append(ParseTrees.get(i));
                Output.append("\n");
            }
            Sentence = t.GetNextTagged();
            if (Sentence == null)
            {
                parsingStarted = false;
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GrammarLoadButton;
    private javax.swing.JTextArea Input;
    private javax.swing.JButton LoadFileButton;
    private javax.swing.JTextArea Output;
    private javax.swing.JButton ParseButton;
    private javax.swing.JProgressBar ParseProgress;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
